faucet {

  # Base directory where all the data used by the fauced is stored
  datadir = ${user.home}"/.mantis-faucet"

  # Wallet address used to send transactions from
  wallet-address = "0x00"

  # Password to unlock faucet wallet
  wallet-password = ""

  # Path to directory where wallet key is stored
  keystore-dir = ${faucet.datadir}"/keystore"

  # Transaction gas price
  tx-gas-price = 20000000000

  # Transaction gas limit
  tx-gas-limit = 90000

  # Transaction value
  tx-value = 1000000000000000000

  rpc-client {
    # Address of Ethereum node used to send the transaction
    rpc-address = "http://127.0.0.1:8546/"

    # certificate of Ethereum node used to send the transaction when use HTTP(S)
    certificate = null
    #certificate {
    # Path to the keystore storing the certificates (used only for https)
    # null value indicates HTTPS is not being used
    #  keystore-path = "tls/mantisCA.p12"

    # Type of certificate keystore being used
    # null value indicates HTTPS is not being used
    #  keystore-type = "pkcs12"

    # File with the password used for accessing the certificate keystore (used only for https)
    # null value indicates HTTPS is not being used
    #  password-file = "tls/password"
    #}

    # Response time-out from rpc client resolve
    timeout = 3.seconds
  }

  # Response time-out to get handler actor
  handler-timeout = 1.seconds

  # Response time-out from actor resolve
  actor-communication-margin = 1.seconds

  # Supervisor with BackoffSupervisor pattern
  supervisor {
    min-backoff = 3.seconds
    max-backoff = 30.seconds
    random-factor = 0.2
    auto-reset = 10.seconds
    attempts = 4
    delay = 0.1
  }

  # timeout for shutting down the ActorSystem
  shutdown-timeout = 15.seconds
}

logging {
  # Flag used to switch logs to the JSON format
  json-output = false

  # Logs directory
  logs-dir = ${faucet.datadir}"/logs"

  # Logs filename
  logs-file = "faucet"

  # Logs level
  logs-level = "INFO"
}

mantis {

  network {

    rpc {
      http {
        # JSON-RPC mode
        # Available modes are: http, https
        # Choosing https requires creating a certificate and setting up 'certificate-keystore-path' and
        # 'certificate-password-file'
        # See: https://github.com/input-output-hk/mantis/wiki/Creating-self-signed-certificate-for-using-JSON-RPC-with-HTTPS
        mode = "http"

        # Whether to enable JSON-RPC HTTP(S) endpoint
        enabled = true

        # Listening address of JSON-RPC HTTP(S) endpoint
        interface = "localhost"

        # Listening port of JSON-RPC HTTP(S) endpoint
        port = 8099

        # certificate when use JSON-RPC HTTP(S)
        certificate = null
        #certificate {
        # Path to the keystore storing the certificates (used only for https)
        # null value indicates HTTPS is not being used
        #  keystore-path = "tls/mantisCA.p12"

        # Type of certificate keystore being used
        # null value indicates HTTPS is not being used
        #  keystore-type = "pkcs12"

        # File with the password used for accessing the certificate keystore (used only for https)
        # null value indicates HTTPS is not being used
        #  password-file = "tls/password"
        #}

        # Domains allowed to query RPC endpoint. Use "*" to enable requests from
        # any domain.
        cors-allowed-origins = []

        # Rate Limit for JSON-RPC requests
        # Limits the amount of request the same ip can perform in a given amount of time
        rate-limit {
          # If enabled, restrictions are applied
          enabled = false

          # Time that should pass between requests
          min-request-interval = 10.seconds

          # Size of stored timestamps for requests made from each ip
          latest-timestamp-cache-size = 1024
        }
      }

      ipc {
        # Whether to enable JSON-RPC over IPC
        enabled = false

        # Path to IPC socket file
        socket-file = ${faucet.datadir}"/mantis.ipc"
      }

      # Enabled JSON-RPC APIs over the JSON-RPC endpoint
      apis = "faucet"
    }
  }
}

kanela.show-banner = false
