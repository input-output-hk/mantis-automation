faucet {
  # Base directory where all the data used by the fauced is stored
  datadir = ${user.home}"/mantis-faucet"

  # Wallet address used to send transactions from
  wallet-address = "0x7fbcf9190993aa5232def0238e129ce7b7e42da7"

  # Password to unlock faucet wallet
  wallet-password = ""

  # Path to directory where wallet key is stored
  keystore-dir = "/root/keystore"

  # Transaction gas price
  tx-gas-price = 20000000000

  # Transaction gas limit
  tx-gas-limit = 90000

  # Transaction value
  tx-value = 1000000000000000000

  # Address of Ethereum node used to send the transaction
  # ETCM-187 workaround
  rpc-client {
    # Address of Ethereum node used to send the transaction
    rpc-address = "{{dependentConfigContext}}"

    # certificate of Ethereum node used to send the transaction when use HTTP(S)
    certificate = null
    #certificate {
    # Path to the keystore storing the certificates (used only for https)
    # null value indicates HTTPS is not being used
    #  keystore-path = "tls/mantisCA.p12"

    # Type of certificate keystore being used
    # null value indicates HTTPS is not being used
    #  keystore-type = "pkcs12"

    # File with the password used for accessing the certificate keystore (used only for https)
    # null value indicates HTTPS is not being used
    #  password-file = "tls/password"
    #}
  }

  # How often can a single IP address send a request
  min-request-interval = 0.minute
}

logging {
  # Flag used to switch logs to the JSON format
  json-output = false

  # Logs directory
  logs-dir = ${faucet.datadir}"/logs"

  # Logs filename
  logs-file = "faucet"
}

mantis {
  network {
    rpc {
      http {
        # JSON-RPC mode
        # Available modes are: http, https
        # Choosing https requires creating a certificate and setting up 'certificate-keystore-path' and
        # 'certificate-password-file'
        # See: https://github.com/input-output-hk/mantis/wiki/Creating-self-signed-certificate-for-using-JSON-RPC-with-HTTPS
        mode = "http"

        # Whether to enable JSON-RPC HTTP(S) endpoint
        enabled = true

        # Listening address of JSON-RPC HTTP(S) endpoint
        interface = "0.0.0.0"

        # Listening port of JSON-RPC HTTP(S) endpoint
        port = 8099

        certificate = null
        #certificate {
        # Path to the keystore storing the certificates (used only for https)
        # null value indicates HTTPS is not being used
        #  keystore-path = "tls/mantisCA.p12"

        # Type of certificate keystore being used
        # null value indicates HTTPS is not being used
        #  keystore-type = "pkcs12"

        # File with the password used for accessing the certificate keystore (used only for https)
        # null value indicates HTTPS is not being used
        #  password-file = "tls/password"
        #}

        # Domains allowed to query RPC endpoint. Use "*" to enable requests from
        # any domain.
        cors-allowed-origins = "*"
      }

      ipc {
        # Whether to enable JSON-RPC over IPC
        enabled = false

        # Path to IPC socket file
        socket-file = ${faucet.datadir}"/faucet.ipc"
      }

      # Enabled JSON-RPC APIs over the JSON-RPC endpoint
      apis = "faucet"
    }
  }
}
